{
  "contractName": "RAYToken",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_storage",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "__storage",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "mintRAYToken",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "getBeneficiary",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "name": "exists",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenExists\",\"outputs\":[{\"name\":\"exists\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"mintRAYToken\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_storage\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"__storage\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"return\":\"uint256 representing the amount owned by the passed address\"},\"burn(uint256)\":{\"details\":\"Burns a specific ERC721 token.\",\"params\":{\"tokenId\":\"uint256 id of the ERC721 token to be burned.\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"return\":\"address currently approved for the given token ID\"},\"getBeneficiary(bytes32)\":{\"details\":\"Simple wrapper over the ERC721 standard function. Not required          since it doesn't override it. Uses naming that better fits          our use-case but besides that doesn't add anything. \",\"params\":{\"tokenId\":\"- The token's id we're trying to get the owner of \"},\"return\":\"The beneficiary/owner of the entered token.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"return\":\"bool whether the given operator is approved by the given owner\"},\"mintRAYToken(bytes32,address)\":{\"details\":\"'key' is not currently used but I'm keeping it for now for           flexibility in the future \",\"params\":{\"beneficiary\":\"is the investor whose receiving the minted token \"},\"return\":\"the token id of the minted RAYT\"},\"name()\":{\"details\":\"Gets the token name\",\"return\":\"string representing the token name\"},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"return\":\"owner address currently marked as the owner of the given token ID\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"supportsInterface(bytes4)\":{\"details\":\"implement supportsInterface(bytes4) using a lookup table\"},\"symbol()\":{\"details\":\"Gets the token symbol\",\"return\":\"string representing the token symbol\"},\"tokenExists(bytes32)\":{\"details\":\"This is used to verify a token Id being entered for mutation          in other contracts RAYT exists, since it would be bad to          mutate storage of a RAYT yet to be minted (attack vector)     ///          This is also a somewhat meaningless wrapper around the ERC721          standard function. Can be removed and refactor all to directly          call _exists. \",\"params\":{\"tokenId\":\"- The id of the token we're checking's existence of \"},\"return\":\"true if token does exist or false if doesn't\"},\"tokenURI(uint256)\":{\"details\":\"Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}}}},\"userdoc\":{\"methods\":{\"getBeneficiary(bytes32)\":{\"notice\":\"Gets the beneficiary/owner of the entered token. \"},\"mintRAYToken(bytes32,address)\":{\"notice\":\"Mint the unique RAYT and insert it into the token registry. \"},\"tokenExists(bytes32)\":{\"notice\":\"Checks if a RAYT with the specified ID exists \"}}}},\"settings\":{\"compilationTarget\":{\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/tokens/RAYToken.sol\":\"RAYToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/Storage.sol\":{\"keccak256\":\"0x668efc8e50b511bcadb72d1f77f81de3ed77e030f101f7b712054fc8a4336251\",\"urls\":[\"bzzr://c4d69c1a566d80de1c392bdc3316f3daf1ab9ffb14e52c00a9598f3ae5bdb5a4\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721.sol\":{\"keccak256\":\"0xcd92e5d6b6d9a2e7f2bc66bd66a7b1f60b6651bb886cc7ec2e362c90b03ef9a6\",\"urls\":[\"bzzr://1336bca18423a3972f89e2043f7ebf181d8eb68306223e2bb831119c9a2b9537\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721Burnable.sol\":{\"keccak256\":\"0x6c72da2d316ee92ff3461a6b889f8ea44e869d2b3693393cc7cfae5f80051d4c\",\"urls\":[\"bzzr://94ffbf7117007559723ee57d34612f99187f925e26675b590e1ee4315cc569ff\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721Metadata.sol\":{\"keccak256\":\"0x378c2df32b0701c07166b917667145e1caef425dcb32122ff2ac42c02ab04fde\",\"urls\":[\"bzzr://319e791589769b32ead467153e76c78693cd3bb160a01ff8e1700516fd46dfd0\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/IERC721.sol\":{\"keccak256\":\"0xcaa735d3223ff93740fcb2aa15ac9de99a30b2be48dd23db4fe19fc1ba8c67bd\",\"urls\":[\"bzzr://83a085b6e77eafe1f990788572c7a8f752bafa7e065adb5c182de32cfe9b52a0\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/IERC721Metadata.sol\":{\"keccak256\":\"0xe70eb45cc4b1579b2947fc8734c5e8e170bf24a8fe3c8de80c948b3b8d0471d3\",\"urls\":[\"bzzr://783c49eb7046681582e981b64e1cc59d0cb1320ba949af894002e490d719153f\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xd71fd9e79e6399451da5a902e29d1ab0136d4ff0ff3ba814efde5b0aee01cf39\",\"urls\":[\"bzzr://d07e4340221a1d5e9b126efd10f3a5f0426c3ba03d866a92d19465fca98913fb\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/introspection/ERC165.sol\":{\"keccak256\":\"0xf16fd3b86958a9449c0123f1681b4f7f66db9841e5b51dce0800fe67eaceedbb\",\"urls\":[\"bzzr://77122adf8e8fc4f0944bdc669c862f390a1217d6f87f62fdb14bed6203da62e3\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/introspection/IERC165.sol\":{\"keccak256\":\"0xab3000c9f0c5f46d91a987e475cf8c89ea54135dfdb90d44b7d197147153b7d2\",\"urls\":[\"bzzr://65bda9317559d829643015a00ad8e1fd0463d1f5c3cdf4b935699f9c539cde34\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/math/SafeMath.sol\":{\"keccak256\":\"0x8c0e3dff911d510049bf7a52a471025c0ef3e07a62e130f7369a150e182153e1\",\"urls\":[\"bzzr://536487134d1f05f26652e13f179a6bed85cf053367b3756f25e0173ad8a04e84\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/utils/Address.sol\":{\"keccak256\":\"0xe454008c1407cf4b7aedcc0d888e52a0e541d36164a79c59f8a25d04ce697b73\",\"urls\":[\"bzzr://b7fbfbbaab01afe6ccb3f3d71a25f336cc98a780651be48b544194c9431106e8\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/tokens/RAYToken.sol\":{\"keccak256\":\"0xf595be23132661e3cfee7894b9b07cba48212d16ae0fbbb9c3a64996c68918db\",\"urls\":[\"bzzr://9454aedd1e13b97eb955eaff8e785d93b5b743e7a07317d39e3dbf078c869b82\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051602080620015fd83398101604081815291518282018352601682527f526f626f2041647669736f7220666f72205969656c64000000000000000000006020808401919091528351808501909452600384527f52415900000000000000000000000000000000000000000000000000000000009084015291620000c07f01ffc9a7000000000000000000000000000000000000000000000000000000006401000000006200017c810204565b620000f47f80ac58cd000000000000000000000000000000000000000000000000000000006401000000006200017c810204565b815162000109906005906020850190620001e9565b5080516200011f906006906020840190620001e9565b50620001547f5b5e139f000000000000000000000000000000000000000000000000000000006401000000006200017c810204565b505060088054600160a060020a031916600160a060020a03929092169190911790556200028e565b7fffffffff000000000000000000000000000000000000000000000000000000008082161415620001ac57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200022c57805160ff19168380011785556200025c565b828001600101855582156200025c579182015b828111156200025c5782518255916020019190600101906200023f565b506200026a9291506200026e565b5090565b6200028b91905b808211156200026a576000815560010162000275565b90565b61135f806200029e6000396000f3006080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461010057806306fdde031461014b578063081812fc146101d5578063095ea7b31461020957806323b872dd1461022f57806342842e0e1461025957806342966c681461028357806356fa44a61461029b5780636352211e146102b35780636ede4983146102cb57806370a082311461030157806395d89b4114610322578063a22cb46514610337578063b88d4fde1461035d578063ba20dda4146103cc578063c3fb90d6146103e4578063c87b56dd146103f9578063e985e9c514610411575b600080fd5b34801561010c57600080fd5b506101377bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610438565b604080519115158252519081900360200190f35b34801561015757600080fd5b5061016061046c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019a578181015183820152602001610182565b50505050905090810190601f1680156101c75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101e157600080fd5b506101ed600435610503565b60408051600160a060020a039092168252519081900360200190f35b34801561021557600080fd5b5061022d600160a060020a0360043516602435610535565b005b34801561023b57600080fd5b5061022d600160a060020a03600435811690602435166044356105eb565b34801561026557600080fd5b5061022d600160a060020a0360043581169060243516604435610610565b34801561028f57600080fd5b5061022d60043561062c565b3480156102a757600080fd5b5061013760043561064d565b3480156102bf57600080fd5b506101ed60043561065e565b3480156102d757600080fd5b506102ef600435600160a060020a03602435166106f3565b60408051918252519081900360200190f35b34801561030d57600080fd5b506102ef600160a060020a036004351661088a565b34801561032e57600080fd5b506101606108bd565b34801561034357600080fd5b5061022d600160a060020a0360043516602435151561091e565b34801561036957600080fd5b50604080516020601f60643560048181013592830184900484028501840190955281845261022d94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506109a29650505050505050565b3480156103d857600080fd5b506101ed6004356109ca565b3480156103f057600080fd5b506101ed6109d5565b34801561040557600080fd5b506101606004356109e4565b34801561041d57600080fd5b50610137600160a060020a0360043581169060243516610a99565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191660009081526020819052604090205460ff1690565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104f85780601f106104cd576101008083540402835291602001916104f8565b820191906000526020600020905b8154815290600101906020018083116104db57829003601f168201915b505050505090505b90565b600061050e82610ac7565b151561051957600080fd5b50600090815260026020526040902054600160a060020a031690565b60006105408261065e565b9050600160a060020a03838116908216141561055b57600080fd5b33600160a060020a038216148061057757506105778133610a99565b151561058257600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6105f53382610ae4565b151561060057600080fd5b61060b838383610b43565b505050565b61060b83838360206040519081016040528060008152506109a2565b6106363382610ae4565b151561064157600080fd5b61064a81610c6c565b50565b600061065882610ac7565b92915050565b600081815260016020526040812054600160a060020a0316801515610658576040805160e560020a62461bcd02815260206004820152603160248201527f23455243373231206f776e65724f6628293a205468657265206973206e6f207460448201527f6f6b656e20776974682074686973204944000000000000000000000000000000606482015290519081900360840190fd5b600854604080517f546f6b656e57726170706572436f6e7472616374000000000000000000000000815281519081900360140181207f0d2020dd0000000000000000000000000000000000000000000000000000000082526004820152905160009283923392600160a060020a039290921691630d2020dd9160248082019260209290919082900301818887803b15801561078d57600080fd5b505af11580156107a1573d6000803e3d6000fd5b505050506040513d60208110156107b757600080fd5b5051600160a060020a031614610863576040805160e560020a62461bcd02815260206004820152604560248201527f23524159546f6b656e206f6e6c79546f6b656e57726170706572204d6f64696660448201527f6965723a204f6e6c7920546f6b656e20577261707065722063616e2063616c6c60648201527f2074686973000000000000000000000000000000000000000000000000000000608482015290519081900360a40190fd5b600980546001019081905561087790610c7e565b90506108838382610d2c565b9392505050565b6000600160a060020a03821615156108a157600080fd5b50600160a060020a031660009081526003602052604090205490565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104f85780601f106104cd576101008083540402835291602001916104f8565b600160a060020a03821633141561093457600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b6109ad8484846105eb565b6109b984848484610edc565b15156109c457600080fd5b50505050565b60006106588261065e565b600854600160a060020a031681565b60606109ef82610ac7565b15156109fa57600080fd5b60008281526007602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015610a8d5780601f10610a6257610100808354040283529160200191610a8d565b820191906000526020600020905b815481529060010190602001808311610a7057829003601f168201915b50505050509050919050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600090815260016020526040902054600160a060020a0316151590565b600080610af08361065e565b905080600160a060020a031684600160a060020a03161480610b2b575083600160a060020a0316610b2084610503565b600160a060020a0316145b80610b3b5750610b3b8185610a99565b949350505050565b82600160a060020a0316610b568261065e565b600160a060020a031614610b6957600080fd5b600160a060020a0382161515610b7e57600080fd5b610b878161105e565b600160a060020a038316600090815260036020526040902054610bb190600163ffffffff6110a616565b600160a060020a038085166000908152600360205260408082209390935590841681522054610be790600163ffffffff61112e16565b600160a060020a038084166000818152600360209081526040808320959095558582526001815290849020805473ffffffffffffffffffffffffffffffffffffffff191683179055835185815293519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a3505050565b61064a610c788261065e565b826111b1565b60008030836040516020018083600160a060020a0316600160a060020a03166c01000000000000000000000000028152601401828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610cf95780518252601f199092019160209182019101610cda565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b600160a060020a0382161515610db2576040805160e560020a62461bcd02815260206004820152603860248201527f23455243373231205f6d696e7428293a2043616e6e6f74206d696e742061207460448201527f6f6b656e20746f20746865206e756c6c20616464726573730000000000000000606482015290519081900360840190fd5b610dbb81610ac7565b15610e36576040805160e560020a62461bcd02815260206004820152603060248201527f234552433732313a205f6d696e7428293a204120746f6b656e20616c7265616460448201527f7920657869737473207769746820494400000000000000000000000000000000606482015290519081900360840190fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0388169081179091558452600390915290912054610e849161112e565b600160a060020a03831660008181526003602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600080610ef185600160a060020a03166111fd565b1515610f005760019150611055565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b83811015610f93578181015183820152602001610f7b565b50505050905090810190601f168015610fc05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610fe257600080fd5b505af1158015610ff6573d6000803e3d6000fd5b505050506040513d602081101561100c57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600081815260026020526040902054600160a060020a03161561064a576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008083831115611127576040805160e560020a62461bcd02815260206004820152603260248201527f23536166654d6174682073756228293a205468697320776f756c64207265737560448201527f6c7420696e20616e20756e646572666c6f770000000000000000000000000000606482015290519081900360840190fd5b5050900390565b600082820183811015610883576040805160e560020a62461bcd02815260206004820152603160248201527f23536166654d6174682061646428293a205468697320776f756c64207265737560448201527f6c7420696e20616e206f766572666c6f77000000000000000000000000000000606482015290519081900360840190fd5b6111bb8282611205565b60008181526007602052604090205460026000196101006001841615020190911604156111f95760008181526007602052604081206111f9916112da565b5050565b6000903b1190565b81600160a060020a03166112188261065e565b600160a060020a03161461122b57600080fd5b6112348161105e565b600160a060020a03821660009081526003602052604090205461125e90600163ffffffff6110a616565b600160a060020a03831660008181526003602090815260408083209490945584825260018152838220805473ffffffffffffffffffffffffffffffffffffffff191690558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b50805460018160011615610100020316600290046000825580601f10611300575061064a565b600091825260209182902061064a9261050092601f01048101905b8082111561132f576000815560010161131b565b50905600a165627a7a72305820454373990517e22833e672954c50e3697ddc8dbd96598e042af507b7017226a50029",
  "deployedBytecode": "",
  "sourceMap": "2080:4348:48:-;;;3102:143;8:9:-1;5:2;;;30:1;27;20:12;5:2;3102:143:48;;;;;;;;;;;;;;;;1864:237:33;;;;;;;;;3102:143:48;1864:237:33;;;;;;;;;;;;;;;;;;;;;;;3102:143:48;1843:39:38;1862:19;1843:18;;;;:39;:::i;:::-;3100::30;3119:19;3100:18;;;;:39;:::i;:::-;1922:12:33;;;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;1944:16:33;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;2048:46:33;2067:26;2048:18;;;;:46;:::i;:::-;-1:-1:-1;;3208:8:48;:29;;-1:-1:-1;;;;;;3208:29:48;-1:-1:-1;;;;;3208:29:48;;;;;;;;;;2080:4348;;2192:158:38;2267:25;;;;;;2259:34;;;;;;2303:33;;:20;:33;;;;;;;;;;:40;;-1:-1:-1;;2303:40:38;2339:4;2303:40;;;2192:158::o;2080:4348:48:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2080:4348:48;;;-1:-1:-1;2080:4348:48;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "2080:4348:48:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1980:133:38;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1980:133:38;-1:-1:-1;;1980:133:38;;;;;;;;;;;;;;;;;;;;;;;2205:76:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2205:76:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;2205:76:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4951:151:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4951:151:30;;;;;;;;;-1:-1:-1;;;;;4951:151:30;;;;;;;;;;;;;;4374:292;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4374:292:30;-1:-1:-1;;;;;4374:292:30;;;;;;;;;6506:180;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6506:180:30;-1:-1:-1;;;;;6506:180:30;;;;;;;;;;;;7325:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;7325:181:30;-1:-1:-1;;;;;7325:181:30;;;;;;;;;;;;1525:127:31;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1525:127:31;;;;;5314:146:48;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5314:146:48;;;;;3723:230:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3723:230:30;;;;;3678:300:48;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3678:300:48;;;-1:-1:-1;;;;;3678:300:48;;;;;;;;;;;;;;;;;;;;;3349:150:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3349:150:30;-1:-1:-1;;;;;3349:150:30;;;;;2389:80:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2389:80:33;;;;5394:213:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5394:213:30;-1:-1:-1;;;;;5394:213:30;;;;;;;;;8211:253;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;8211:253:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8211:253:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8211:253:30;;-1:-1:-1;8211:253:30;;-1:-1:-1;;;;;;;8211:253:30;4513:143:48;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4513:143:48;;;;;2320:23;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2320:23:48;;;;2668:144:33;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2668:144:33;;;;;5928:145:30;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5928:145:30;-1:-1:-1;;;;;5928:145:30;;;;;;;;;;1980:133:38;-1:-1:-1;;2073:33:38;2050:4;2073:33;;;;;;;;;;;;;;1980:133::o;2205:76:33:-;2269:5;2262:12;;;;;;;;-1:-1:-1;;2262:12:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2244:6;;2262:12;;2269:5;;2262:12;;2269:5;2262:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2205:76;;:::o;4951:151:30:-;5010:7;5037:16;5045:7;5037;:16::i;:::-;5029:25;;;;;;;;-1:-1:-1;5071:24:30;;;;:15;:24;;;;;;-1:-1:-1;;;;;5071:24:30;;4951:151::o;4374:292::-;4437:13;4453:16;4461:7;4453;:16::i;:::-;4437:32;-1:-1:-1;;;;;;4487:11:30;;;;;;;;4479:20;;;;;;4517:10;-1:-1:-1;;;;;4517:19:30;;;;:58;;;4540:35;4557:5;4564:10;4540:16;:35::i;:::-;4509:67;;;;;;;;4587:24;;;;:15;:24;;;;;;:29;;-1:-1:-1;;4587:29:30;-1:-1:-1;;;;;4587:29:30;;;;;;;;;4631:28;;4587:24;;4631:28;;;;;;;4374:292;;;:::o;6506:180::-;6596:39;6615:10;6627:7;6596:18;:39::i;:::-;6588:48;;;;;;;;6647:32;6661:4;6667:2;6671:7;6647:13;:32::i;:::-;6506:180;;;:::o;7325:181::-;7460:39;7477:4;7483:2;7487:7;7460:39;;;;;;;;;;;;;:16;:39::i;1525:127:31:-;1581:39;1600:10;1612:7;1581:18;:39::i;:::-;1573:48;;;;;;;;1631:14;1637:7;1631:5;:14::i;:::-;1525:127;:::o;5314:146:48:-;5393:11;5425:28;5444:7;5425:13;:28::i;:::-;5418:35;5314:146;-1:-1:-1;;5314:146:48:o;3723:230:30:-;3778:7;3813:20;;;:11;:20;;;;;;-1:-1:-1;;;;;3813:20:30;3851:19;;;3843:81;;;;;-1:-1:-1;;;;;3843:81:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3678:300:48;2565:8;;2280:33;;;;;;;;;;;;;;;;2565:51;;;;;;;;;3808:7;;;;2620:10;;-1:-1:-1;;;;;2565:8:48;;;;;:27;;:51;;;;;;;;;;;;;;;3808:7;2565:8;:51;;;5:2:-1;;;;30:1;27;20:12;5:2;2565:51:48;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2565:51:48;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2565:51:48;-1:-1:-1;;;;;2565:65:48;;2544:181;;;;;-1:-1:-1;;;;;2544:181:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3832:4;:6;;;;;;;;3868:24;;:18;:24::i;:::-;3848:44;-1:-1:-1;3903:41:48;3915:11;3848:44;3903:11;:41::i;:::-;3962:9;3678:300;-1:-1:-1;;;3678:300:48:o;3349:150:30:-;3404:7;-1:-1:-1;;;;;3431:19:30;;;;3423:28;;;;;;-1:-1:-1;;;;;;3468:24:30;;;;;:17;:24;;;;;;;3349:150::o;2389:80:33:-;2455:7;2448:14;;;;;;;;-1:-1:-1;;2448:14:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2430:6;;2448:14;;2455:7;;2448:14;;2455:7;2448:14;;;;;;;;;;;;;;;;;;;;;;;;5394:213:30;-1:-1:-1;;;;;5473:16:30;;5479:10;5473:16;;5465:25;;;;;;5519:10;5500:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;5500:34:30;;;;;;;;;;;;:45;;-1:-1:-1;;5500:45:30;;;;;;;;;;5560:40;;;;;;;5500:34;;5519:10;5560:40;;;;;;;;;;;5394:213;;:::o;8211:253::-;8310:31;8323:4;8329:2;8333:7;8310:12;:31::i;:::-;8408:48;8431:4;8437:2;8441:7;8450:5;8408:22;:48::i;:::-;8400:57;;;;;;;;8211:253;;;;:::o;4513:143:48:-;4591:7;4621:28;4640:7;4621:13;:28::i;2320:23::-;;;-1:-1:-1;;;;;2320:23:48;;:::o;2668:144:33:-;2726:6;2752:16;2760:7;2752;:16::i;:::-;2744:25;;;;;;;;2786:19;;;;:10;:19;;;;;;;;;2779:26;;;;;;-1:-1:-1;;2779:26:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2786:19;;2779:26;;2786:19;2779:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2668:144;;;:::o;5928:145:30:-;-1:-1:-1;;;;;6031:25:30;;;6008:4;6031:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;5928:145::o;8653:152::-;8710:4;8742:20;;;:11;:20;;;;;;-1:-1:-1;;;;;8742:20:30;8779:19;;;8653:152::o;9168:404::-;9253:4;9269:13;9285:16;9293:7;9285;:16::i;:::-;9269:32;;9488:5;-1:-1:-1;;;;;9477:16:30;:7;-1:-1:-1;;;;;9477:16:30;;:51;;;;9521:7;-1:-1:-1;;;;;9497:31:30;:20;9509:7;9497:11;:20::i;:::-;-1:-1:-1;;;;;9497:31:30;;9477:51;:87;;;;9532:32;9549:5;9556:7;9532:16;:32::i;:::-;9469:96;9168:404;-1:-1:-1;;;;9168:404:30:o;11426:402::-;11539:4;-1:-1:-1;;;;;11519:24:30;:16;11527:7;11519;:16::i;:::-;-1:-1:-1;;;;;11519:24:30;;11511:33;;;;;;-1:-1:-1;;;;;11562:16:30;;;;11554:25;;;;;;11590:23;11605:7;11590:14;:23::i;:::-;-1:-1:-1;;;;;11650:23:30;;;;;;:17;:23;;;;;;:30;;11678:1;11650:30;:27;:30;:::i;:::-;-1:-1:-1;;;;;11624:23:30;;;;;;;:17;:23;;;;;;:56;;;;11714:21;;;;;;;:28;;11740:1;11714:28;:25;:28;:::i;:::-;-1:-1:-1;;;;;11690:21:30;;;;;;;:17;:21;;;;;;;;:52;;;;11753:20;;;:11;:20;;;;;;:25;;-1:-1:-1;;11753:25:30;;;;;11794:27;;;;;;;11690:21;;11794:27;;;;;;;;;;;;;;;11426:402;;;:::o;10962:90::-;11013:32;11019:16;11027:7;11019;:16::i;:::-;11037:7;11013:5;:32::i;6232:193:48:-;6294:7;6317:20;6375:4;6382:5;6350:38;;;;;;-1:-1:-1;;;;;6350:38:48;-1:-1:-1;;;;;6350:38:48;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;6350:38:48;;;6340:49;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;6340:49:48;;;;;;;;;;;;-1:-1:-1;;;;;;6232:193:48:o;9815:390:30:-;-1:-1:-1;;;;;9886:16:30;;;;9878:85;;;;;-1:-1:-1;;;;;9878:85:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9982:16;9990:7;9982;:16::i;:::-;9981:17;9973:78;;;;;-1:-1:-1;;;;;9973:78:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10062:20;;;;:11;:20;;;;;;;;:25;;-1:-1:-1;;10062:25:30;-1:-1:-1;;;;;10062:25:30;;;;;;;;10121:21;;:17;:21;;;;;;;:28;;:25;:28::i;:::-;-1:-1:-1;;;;;10097:21:30;;;;;;:17;:21;;;;;;;;:52;;;;10165:33;;;;;;;10097:21;;;;10165:33;;;;;;;;;;9815:390;;:::o;12351:328::-;12457:4;12541:13;12478:15;:2;-1:-1:-1;;;;;12478:13:30;;:15::i;:::-;12477:16;12473:58;;;12516:4;12509:11;;;;12473:58;12557:70;;;;;12594:10;12557:70;;;;;;-1:-1:-1;;;;;12557:70:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;:36;;;;;;12594:10;12606:4;;12612:7;;12621:5;;12557:70;;;;;;;;;;;;;;-1:-1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;12557:70:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12557:70:30;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12557:70:30;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;12557:70:30;-1:-1:-1;;12645:26:30;;12655:16;12645:26;;-1:-1:-1;12557:70:30;-1:-1:-1;12351:328:30;;;;;;;;:::o;12840:171::-;12939:1;12903:24;;;:15;:24;;;;;;-1:-1:-1;;;;;12903:24:30;:38;12899:106;;12992:1;12957:24;;;:15;:24;;;;;:37;;-1:-1:-1;;12957:37:30;;;12840:171::o;1469:199:41:-;1527:7;;1554:6;;;;1546:69;;;;;-1:-1:-1;;;;;1546:69:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1637:5:41;;;1469:199::o;1749:198::-;1807:7;1838:5;;;1861:6;;;;1853:68;;;;;-1:-1:-1;;;;;1853:68:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3476:240:33;3542:27;3554:5;3561:7;3542:11;:27::i;:::-;3625:19;;;;:10;:19;;;;;3619:33;;-1:-1:-1;;3619:33:33;;;;;;;;;;;:38;3615:95;;3680:19;;;;:10;:19;;;;;3673:26;;;:::i;:::-;3476:240;;:::o;1667:624:42:-;1727:4;2238:20;;2276:8;;1667:624::o;10478:305:30:-;10572:5;-1:-1:-1;;;;;10552:25:30;:16;10560:7;10552;:16::i;:::-;-1:-1:-1;;;;;10552:25:30;;10544:34;;;;;;10589:23;10604:7;10589:14;:23::i;:::-;-1:-1:-1;;;;;10650:24:30;;;;;;:17;:24;;;;;;:31;;10679:1;10650:31;:28;:31;:::i;:::-;-1:-1:-1;;;;;10623:24:30;;;;;;:17;:24;;;;;;;;:58;;;;10691:20;;;:11;:20;;;;;:33;;-1:-1:-1;;10691:33:30;;;10740:36;;;;;;;10623:24;;10740:36;;;;;;;;;;;10478:305;;:::o;2080:4348:48:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "/**\n\n    The software and documentation available in this repository (the \"Software\") is\n    protected by copyright law and accessible pursuant to the license set forth below.\n\n    Copyright © 2019 Staked Securely, Inc. All rights reserved.\n\n    Permission is hereby granted, free of charge, to any person or organization\n    obtaining the Software (the “Licensee”) to privately study, review, and analyze\n    the Software. Licensee shall not use the Software for any other purpose. Licensee\n    shall not modify, transfer, assign, share, or sub-license the Software or any\n    derivative works of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n    PARTICULAR PURPOSE, TITLE, AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT,\n    OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION WITH THE SOFTWARE.\n\n*/\n\npragma solidity 0.4.25;\n\n\n// external dependencies\nimport \"../openzeppelin/ERC721/ERC721Burnable.sol\";\nimport \"../openzeppelin/ERC721/ERC721Metadata.sol\";\n\n// internal dependencies\nimport \"../Storage.sol\";\n\n\n/// @notice  RAYT are an ERC721 compatible token that represent a users 'stake' or\n///         position in a particular RAY portfolio pool. That is, in the high-level pools.\n///\n/// @dev    The RAYT is meant to be eternal. We don't want to need to upgrade\n///         the token contract which is why this is bare bones to the standard.\n///         We prefer eternal token because it's better for interoperability. If\n///         we upgrade our token contract, all third-party places we're listed\n///         such as wallets or exchanges,  need to switch configurations too, it\n///         gets confusing to track, etc.\n///\n///         As such, only the TokenWrapper can access the functions held here in\n///         case we wish to change the permissions/logic access control on them\n///\n/// Author:  Devan Purhar\n/// Version: 1.0.0\ncontract RAYToken is ERC721Burnable, ERC721Metadata {\n\n\n  /*************** STORAGE VARIABLE DECLARATIONS **************/\n\n\n    // contracts used\n    bytes32 internal constant TOKEN_WRAPPER_CONTRACT = keccak256(\"TokenWrapperContract\");\n\n    Storage public _storage;\n    uint internal salt;\n\n\n    /*************** MODIFIER DECLARATIONS **************/\n\n\n    /// @notice  Requires the caller is our TokenWrapper contract\n    modifier onlyTokenWrapper()\n    {\n        require(\n            _storage.getContractAddress(TOKEN_WRAPPER_CONTRACT) == msg.sender,\n            \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\"\n        );\n\n        _;\n    }\n\n\n    /////////////////////// FUNCTION DECLARATIONS BEGIN ///////////////////////\n\n    /******************* PUBLIC FUNCTIONS *******************/\n\n\n    /// @notice Constructs an ERC721 RAYT contract. Sets the name to be\n    ///         \"Robo Advisor for Yield\" and the ticker to \"RAY\".\n    ///\n    /// @param   __storage - The Storage contracts address\n    constructor(address __storage)\n\t\t  ERC721Metadata(\"Robo Advisor for Yield\", \"RAY\")\n\t\t  public\n\t  {\n\n      _storage = Storage(__storage);\n\n    }\n\n\n    /** ----------------- ONLY TOKEN WRAPPER MUTATORS ----------------- **/\n\n\n    /// @notice  Mint the unique RAYT and insert it into the token registry.\n    ///\n    /// @dev     'key' is not currently used but I'm keeping it for now for\n    ///           flexibility in the future\n    ///\n    /// @param   beneficiary is the investor whose receiving the minted token\n    ///\n    /// @return  the token id of the minted RAYT\n    function mintRAYToken(\n      bytes32 /*key*/,\n      address beneficiary\n    )\n      external\n      onlyTokenWrapper\n      returns(bytes32)\n    {\n\n        salt++;\n        bytes32 entryHash = createIssuanceHash(salt);\n\n        super._mint(beneficiary, uint(entryHash));\n\n        return entryHash;\n    }\n\n\n    /** ----------------- OVER-RIDDEN VIEW ACCESSORS ----------------- **/\n\n\n    /// @notice  Gets the beneficiary/owner of the entered token.\n    ///\n    /// @dev     Simple wrapper over the ERC721 standard function. Not required\n    ///          since it doesn't override it. Uses naming that better fits\n    ///          our use-case but besides that doesn't add anything.\n    ///\n    /// @param   tokenId - The token's id we're trying to get the owner of\n    ///\n    /// @return  The beneficiary/owner of the entered token.\n    function getBeneficiary(bytes32 tokenId)\n    \texternal\n    \tview\n    \treturns(address)\n    {\n        return super.ownerOf(uint(tokenId));\n    }\n\n\n    /// @notice  Checks if a RAYT with the specified ID exists\n    ///\n    /// @dev     This is used to verify a token Id being entered for mutation\n    ///          in other contracts RAYT exists, since it would be bad to\n    ///          mutate storage of a RAYT yet to be minted (attack vector)\n    ///\n    ///          This is also a somewhat meaningless wrapper around the ERC721\n    ///          standard function. Can be removed and refactor all to directly\n    ///          call _exists.\n    ///\n    /// @param   tokenId - The id of the token we're checking's existence of\n    ///\n    /// @return  true if token does exist or false if doesn't\n    function tokenExists(bytes32 tokenId)\n      external\n      view\n      returns (bool exists)\n    {\n      return super._exists(uint(tokenId));\n    }\n\n\n    /*************** INTERNAL FUNCTIONS **************/\n\n\n    /// @notice  Helper function for computing the token id of a RAYT for issuance.\n    ///\n    /// @dev     The hash/id is completely deterministic, but that shouldn't matter\n    ///          since we have checks in place in other contracts to ensure\n    ///          the integrity of a token id being entered (true owner/exists)\n    ///\n    /// @param   _salt - The variable we use to ensure token id's are unique from\n    ///                  each other.\n    ///\n    /// TODO:     Stop passing in _salt as a parameter - waste of gas since its\n    ///           already available in the global storage. Unless it's cheaper\n    ///           to pass as an internal parameter over accessing global storage?\n    function createIssuanceHash(uint _salt) internal view returns(bytes32)\n    {\n        bytes32 issuanceHash = keccak256(abi.encodePacked(address(this), _salt));\n        return issuanceHash;\n    }\n\n}\n",
  "sourcePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/tokens/RAYToken.sol",
  "ast": {
    "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/tokens/RAYToken.sol",
    "exportedSymbols": {
      "RAYToken": [
        13795
      ]
    },
    "id": 13796,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 13663,
        "literals": [
          "solidity",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "1039:23:48"
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721Burnable.sol",
        "file": "../openzeppelin/ERC721/ERC721Burnable.sol",
        "id": 13664,
        "nodeType": "ImportDirective",
        "scope": 13796,
        "sourceUnit": 10279,
        "src": "1090:51:48",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721Metadata.sol",
        "file": "../openzeppelin/ERC721/ERC721Metadata.sol",
        "id": 13665,
        "nodeType": "ImportDirective",
        "scope": 13796,
        "sourceUnit": 10430,
        "src": "1142:51:48",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/Storage.sol",
        "file": "../Storage.sol",
        "id": 13666,
        "nodeType": "ImportDirective",
        "scope": 13796,
        "sourceUnit": 7865,
        "src": "1220:24:48",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 13667,
              "name": "ERC721Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10278,
              "src": "2101:14:48",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Burnable_$10278",
                "typeString": "contract ERC721Burnable"
              }
            },
            "id": 13668,
            "nodeType": "InheritanceSpecifier",
            "src": "2101:14:48"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 13669,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10429,
              "src": "2117:14:48",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$10429",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 13670,
            "nodeType": "InheritanceSpecifier",
            "src": "2117:14:48"
          }
        ],
        "contractDependencies": [
          10254,
          10278,
          10429,
          10532,
          10555,
          10703,
          10850
        ],
        "contractKind": "contract",
        "documentation": "@notice  RAYT are an ERC721 compatible token that represent a users 'stake' or\n         position in a particular RAY portfolio pool. That is, in the high-level pools.\n\n/// @dev    The RAYT is meant to be eternal. We don't want to need to upgrade\n         the token contract which is why this is bare bones to the standard.\n         We prefer eternal token because it's better for interoperability. If\n         we upgrade our token contract, all third-party places we're listed\n         such as wallets or exchanges,  need to switch configurations too, it\n         gets confusing to track, etc.\n\n///         As such, only the TokenWrapper can access the functions held here in\n         case we wish to change the permissions/logic access control on them\n\n/// Author:  Devan Purhar\n Version: 1.0.0",
        "fullyImplemented": true,
        "id": 13795,
        "linearizedBaseContracts": [
          13795,
          10429,
          10555,
          10278,
          10254,
          10532,
          10703,
          10850
        ],
        "name": "RAYToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 13675,
            "name": "TOKEN_WRAPPER_CONTRACT",
            "nodeType": "VariableDeclaration",
            "scope": 13795,
            "src": "2229:84:48",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 13671,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2229:7:48",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "546f6b656e57726170706572436f6e7472616374",
                  "id": 13673,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2290:22:48",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  },
                  "value": "TokenWrapperContract"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  }
                ],
                "id": 13672,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 15864,
                "src": "2280:9:48",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                  "typeString": "function () pure returns (bytes32)"
                }
              },
              "id": 13674,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2280:33:48",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 13677,
            "name": "_storage",
            "nodeType": "VariableDeclaration",
            "scope": 13795,
            "src": "2320:23:48",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Storage_$7864",
              "typeString": "contract Storage"
            },
            "typeName": {
              "contractScope": null,
              "id": 13676,
              "name": "Storage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7864,
              "src": "2320:7:48",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Storage_$7864",
                "typeString": "contract Storage"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 13679,
            "name": "salt",
            "nodeType": "VariableDeclaration",
            "scope": 13795,
            "src": "2349:18:48",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 13678,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "2349:4:48",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 13693,
              "nodeType": "Block",
              "src": "2534:210:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 13688,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 13684,
                              "name": "TOKEN_WRAPPER_CONTRACT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13675,
                              "src": "2593:22:48",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 13682,
                              "name": "_storage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13677,
                              "src": "2565:8:48",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Storage_$7864",
                                "typeString": "contract Storage"
                              }
                            },
                            "id": 13683,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getContractAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6785,
                            "src": "2565:27:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 13685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2565:51:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 13686,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15870,
                            "src": "2620:3:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 13687,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2620:10:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2565:65:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "23524159546f6b656e206f6e6c79546f6b656e57726170706572204d6f6469666965723a204f6e6c7920546f6b656e20577261707065722063616e2063616c6c2074686973",
                        "id": 13689,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2644:71:48",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        },
                        "value": "#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        }
                      ],
                      "id": 13681,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        15873,
                        15874
                      ],
                      "referencedDeclaration": 15874,
                      "src": "2544:7:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 13690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2544:181:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13691,
                  "nodeType": "ExpressionStatement",
                  "src": "2544:181:48"
                },
                {
                  "id": 13692,
                  "nodeType": "PlaceholderStatement",
                  "src": "2736:1:48"
                }
              ]
            },
            "documentation": "@notice  Requires the caller is our TokenWrapper contract",
            "id": 13694,
            "name": "onlyTokenWrapper",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 13680,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2527:2:48"
            },
            "src": "2502:242:48",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 13709,
              "nodeType": "Block",
              "src": "3199:46:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 13703,
                      "name": "_storage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13677,
                      "src": "3208:8:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7864",
                        "typeString": "contract Storage"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 13705,
                          "name": "__storage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13696,
                          "src": "3227:9:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 13704,
                        "name": "Storage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7864,
                        "src": "3219:7:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Storage_$7864_$",
                          "typeString": "type(contract Storage)"
                        }
                      },
                      "id": 13706,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3219:18:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7864",
                        "typeString": "contract Storage"
                      }
                    },
                    "src": "3208:29:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Storage_$7864",
                      "typeString": "contract Storage"
                    }
                  },
                  "id": 13708,
                  "nodeType": "ExpressionStatement",
                  "src": "3208:29:48"
                }
              ]
            },
            "documentation": "@notice Constructs an ERC721 RAYT contract. Sets the name to be\n         \"Robo Advisor for Yield\" and the ticker to \"RAY\".\n\n    /// @param   __storage - The Storage contracts address",
            "id": 13710,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "526f626f2041647669736f7220666f72205969656c64",
                    "id": 13699,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3152:24:48",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b6ee325484c5a8aa53e3d36bb45825af89298554d3f712b125f547bee4a508fa",
                      "typeString": "literal_string \"Robo Advisor for Yield\""
                    },
                    "value": "Robo Advisor for Yield"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "524159",
                    "id": 13700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3178:5:48",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_6220ca3f77e0f4084fd86eb452630b5b212a90ba8ff64282483fe0d6aee3fe3d",
                      "typeString": "literal_string \"RAY\""
                    },
                    "value": "RAY"
                  }
                ],
                "id": 13701,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13698,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 10429,
                  "src": "3137:14:48",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$10429_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3137:47:48"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13696,
                  "name": "__storage",
                  "nodeType": "VariableDeclaration",
                  "scope": 13710,
                  "src": "3114:17:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13695,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3114:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3113:19:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3199:0:48"
            },
            "scope": 13795,
            "src": "3102:143:48",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13741,
              "nodeType": "Block",
              "src": "3821:157:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13722,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "3832:6:48",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 13721,
                      "name": "salt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13679,
                      "src": "3832:4:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 13723,
                  "nodeType": "ExpressionStatement",
                  "src": "3832:6:48"
                },
                {
                  "assignments": [
                    13725
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 13725,
                      "name": "entryHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 13742,
                      "src": "3848:17:48",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 13724,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3848:7:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 13729,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 13727,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13679,
                        "src": "3887:4:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 13726,
                      "name": "createIssuanceHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13794,
                      "src": "3868:18:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256) view returns (bytes32)"
                      }
                    },
                    "id": 13728,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3868:24:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3848:44:48"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 13733,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13714,
                        "src": "3915:11:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 13735,
                            "name": "entryHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13725,
                            "src": "3933:9:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 13734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3928:4:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 13736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3928:15:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13730,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16016,
                        "src": "3903:5:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$13795",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 13732,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10066,
                      "src": "3903:11:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 13737,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3903:41:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13738,
                  "nodeType": "ExpressionStatement",
                  "src": "3903:41:48"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13739,
                    "name": "entryHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 13725,
                    "src": "3962:9:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 13720,
                  "id": 13740,
                  "nodeType": "Return",
                  "src": "3955:16:48"
                }
              ]
            },
            "documentation": "@notice  Mint the unique RAYT and insert it into the token registry.\n\n    /// @dev     'key' is not currently used but I'm keeping it for now for\n           flexibility in the future\n\n    /// @param   beneficiary is the investor whose receiving the minted token\n\n    /// @return  the token id of the minted RAYT",
            "id": 13742,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 13717,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13716,
                  "name": "onlyTokenWrapper",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 13694,
                  "src": "3777:16:48",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3777:16:48"
              }
            ],
            "name": "mintRAYToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13715,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13712,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13742,
                  "src": "3707:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13711,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3707:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13714,
                  "name": "beneficiary",
                  "nodeType": "VariableDeclaration",
                  "scope": 13742,
                  "src": "3730:19:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13713,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3730:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3699:56:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13719,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13742,
                  "src": "3808:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13718,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3808:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3807:9:48"
            },
            "scope": 13795,
            "src": "3678:300:48",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13756,
              "nodeType": "Block",
              "src": "4604:52:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 13752,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13744,
                            "src": "4640:7:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 13751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4635:4:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 13753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4635:13:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13749,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16016,
                        "src": "4621:5:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$13795",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 13750,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9786,
                      "src": "4621:13:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 13754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4621:28:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 13748,
                  "id": 13755,
                  "nodeType": "Return",
                  "src": "4614:35:48"
                }
              ]
            },
            "documentation": "@notice  Gets the beneficiary/owner of the entered token.\n\n    /// @dev     Simple wrapper over the ERC721 standard function. Not required\n          since it doesn't override it. Uses naming that better fits\n          our use-case but besides that doesn't add anything.\n\n    /// @param   tokenId - The token's id we're trying to get the owner of\n\n    /// @return  The beneficiary/owner of the entered token.",
            "id": 13757,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getBeneficiary",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13744,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13757,
                  "src": "4537:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13743,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4537:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4536:17:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13748,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13747,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13757,
                  "src": "4591:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13746,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4591:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4590:9:48"
            },
            "scope": 13795,
            "src": "4513:143:48",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13771,
              "nodeType": "Block",
              "src": "5410:50:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 13767,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13759,
                            "src": "5444:7:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 13766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5439:4:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 13768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5439:13:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13764,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16016,
                        "src": "5425:5:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$13795",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 13765,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_exists",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9984,
                      "src": "5425:13:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 13769,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5425:28:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 13763,
                  "id": 13770,
                  "nodeType": "Return",
                  "src": "5418:35:48"
                }
              ]
            },
            "documentation": "@notice  Checks if a RAYT with the specified ID exists\n\n    /// @dev     This is used to verify a token Id being entered for mutation\n          in other contracts RAYT exists, since it would be bad to\n          mutate storage of a RAYT yet to be minted (attack vector)\n\n    ///          This is also a somewhat meaningless wrapper around the ERC721\n          standard function. Can be removed and refactor all to directly\n          call _exists.\n\n    /// @param   tokenId - The id of the token we're checking's existence of\n\n    /// @return  true if token does exist or false if doesn't",
            "id": 13772,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "tokenExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13759,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13772,
                  "src": "5335:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13758,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5335:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5334:17:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13762,
                  "name": "exists",
                  "nodeType": "VariableDeclaration",
                  "scope": 13772,
                  "src": "5393:11:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13761,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5393:4:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5392:13:48"
            },
            "scope": 13795,
            "src": "5314:146:48",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13793,
              "nodeType": "Block",
              "src": "6307:118:48",
              "statements": [
                {
                  "assignments": [
                    13780
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 13780,
                      "name": "issuanceHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 13794,
                      "src": "6317:20:48",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 13779,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6317:7:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 13790,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 13785,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16015,
                                "src": "6375:4:48",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_RAYToken_$13795",
                                  "typeString": "contract RAYToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_RAYToken_$13795",
                                  "typeString": "contract RAYToken"
                                }
                              ],
                              "id": 13784,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6367:7:48",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 13786,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6367:13:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 13787,
                            "name": "_salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13774,
                            "src": "6382:5:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 13782,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15857,
                            "src": "6350:3:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 13783,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "6350:16:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 13788,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6350:38:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 13781,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15864,
                      "src": "6340:9:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                        "typeString": "function () pure returns (bytes32)"
                      }
                    },
                    "id": 13789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6340:49:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6317:72:48"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13791,
                    "name": "issuanceHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 13780,
                    "src": "6406:12:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 13778,
                  "id": 13792,
                  "nodeType": "Return",
                  "src": "6399:19:48"
                }
              ]
            },
            "documentation": "@notice  Helper function for computing the token id of a RAYT for issuance.\n\n    /// @dev     The hash/id is completely deterministic, but that shouldn't matter\n          since we have checks in place in other contracts to ensure\n          the integrity of a token id being entered (true owner/exists)\n\n    /// @param   _salt - The variable we use to ensure token id's are unique from\n                  each other.\n\n    /// TODO:     Stop passing in _salt as a parameter - waste of gas since its\n           already available in the global storage. Unless it's cheaper\n           to pass as an internal parameter over accessing global storage?",
            "id": 13794,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "createIssuanceHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13774,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 13794,
                  "src": "6260:10:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13773,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6260:4:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6259:12:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13778,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13777,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13794,
                  "src": "6294:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13776,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6294:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6293:9:48"
            },
            "scope": 13795,
            "src": "6232:193:48",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 13796,
        "src": "2080:4348:48"
      }
    ],
    "src": "1039:5390:48"
  },
  "legacyAST": {
    "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/tokens/RAYToken.sol",
    "exportedSymbols": {
      "RAYToken": [
        13795
      ]
    },
    "id": 13796,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 13663,
        "literals": [
          "solidity",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "1039:23:48"
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721Burnable.sol",
        "file": "../openzeppelin/ERC721/ERC721Burnable.sol",
        "id": 13664,
        "nodeType": "ImportDirective",
        "scope": 13796,
        "sourceUnit": 10279,
        "src": "1090:51:48",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC721/ERC721Metadata.sol",
        "file": "../openzeppelin/ERC721/ERC721Metadata.sol",
        "id": 13665,
        "nodeType": "ImportDirective",
        "scope": 13796,
        "sourceUnit": 10430,
        "src": "1142:51:48",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/Storage.sol",
        "file": "../Storage.sol",
        "id": 13666,
        "nodeType": "ImportDirective",
        "scope": 13796,
        "sourceUnit": 7865,
        "src": "1220:24:48",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 13667,
              "name": "ERC721Burnable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10278,
              "src": "2101:14:48",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Burnable_$10278",
                "typeString": "contract ERC721Burnable"
              }
            },
            "id": 13668,
            "nodeType": "InheritanceSpecifier",
            "src": "2101:14:48"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 13669,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10429,
              "src": "2117:14:48",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$10429",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 13670,
            "nodeType": "InheritanceSpecifier",
            "src": "2117:14:48"
          }
        ],
        "contractDependencies": [
          10254,
          10278,
          10429,
          10532,
          10555,
          10703,
          10850
        ],
        "contractKind": "contract",
        "documentation": "@notice  RAYT are an ERC721 compatible token that represent a users 'stake' or\n         position in a particular RAY portfolio pool. That is, in the high-level pools.\n\n/// @dev    The RAYT is meant to be eternal. We don't want to need to upgrade\n         the token contract which is why this is bare bones to the standard.\n         We prefer eternal token because it's better for interoperability. If\n         we upgrade our token contract, all third-party places we're listed\n         such as wallets or exchanges,  need to switch configurations too, it\n         gets confusing to track, etc.\n\n///         As such, only the TokenWrapper can access the functions held here in\n         case we wish to change the permissions/logic access control on them\n\n/// Author:  Devan Purhar\n Version: 1.0.0",
        "fullyImplemented": true,
        "id": 13795,
        "linearizedBaseContracts": [
          13795,
          10429,
          10555,
          10278,
          10254,
          10532,
          10703,
          10850
        ],
        "name": "RAYToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 13675,
            "name": "TOKEN_WRAPPER_CONTRACT",
            "nodeType": "VariableDeclaration",
            "scope": 13795,
            "src": "2229:84:48",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 13671,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "2229:7:48",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "argumentTypes": null,
              "arguments": [
                {
                  "argumentTypes": null,
                  "hexValue": "546f6b656e57726170706572436f6e7472616374",
                  "id": 13673,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "2290:22:48",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  },
                  "value": "TokenWrapperContract"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_d8ff1e958425a09833afc1a9dcf5c56f3847faab0c0fb935f69aab7606735310",
                    "typeString": "literal_string \"TokenWrapperContract\""
                  }
                ],
                "id": 13672,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 15864,
                "src": "2280:9:48",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                  "typeString": "function () pure returns (bytes32)"
                }
              },
              "id": 13674,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "2280:33:48",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 13677,
            "name": "_storage",
            "nodeType": "VariableDeclaration",
            "scope": 13795,
            "src": "2320:23:48",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Storage_$7864",
              "typeString": "contract Storage"
            },
            "typeName": {
              "contractScope": null,
              "id": 13676,
              "name": "Storage",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7864,
              "src": "2320:7:48",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Storage_$7864",
                "typeString": "contract Storage"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 13679,
            "name": "salt",
            "nodeType": "VariableDeclaration",
            "scope": 13795,
            "src": "2349:18:48",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 13678,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "2349:4:48",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 13693,
              "nodeType": "Block",
              "src": "2534:210:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 13688,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 13684,
                              "name": "TOKEN_WRAPPER_CONTRACT",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13675,
                              "src": "2593:22:48",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 13682,
                              "name": "_storage",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 13677,
                              "src": "2565:8:48",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Storage_$7864",
                                "typeString": "contract Storage"
                              }
                            },
                            "id": 13683,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "getContractAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 6785,
                            "src": "2565:27:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_view$_t_bytes32_$returns$_t_address_$",
                              "typeString": "function (bytes32) view external returns (address)"
                            }
                          },
                          "id": 13685,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2565:51:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 13686,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15870,
                            "src": "2620:3:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 13687,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "2620:10:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2565:65:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "23524159546f6b656e206f6e6c79546f6b656e57726170706572204d6f6469666965723a204f6e6c7920546f6b656e20577261707065722063616e2063616c6c2074686973",
                        "id": 13689,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "2644:71:48",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        },
                        "value": "#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e74131563ee914dacfa3786063627003179c9b23c5c0ed4660537bcaec2bbe49",
                          "typeString": "literal_string \"#RAYToken onlyTokenWrapper Modifier: Only Token Wrapper can call this\""
                        }
                      ],
                      "id": 13681,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        15873,
                        15874
                      ],
                      "referencedDeclaration": 15874,
                      "src": "2544:7:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 13690,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2544:181:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13691,
                  "nodeType": "ExpressionStatement",
                  "src": "2544:181:48"
                },
                {
                  "id": 13692,
                  "nodeType": "PlaceholderStatement",
                  "src": "2736:1:48"
                }
              ]
            },
            "documentation": "@notice  Requires the caller is our TokenWrapper contract",
            "id": 13694,
            "name": "onlyTokenWrapper",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 13680,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2527:2:48"
            },
            "src": "2502:242:48",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 13709,
              "nodeType": "Block",
              "src": "3199:46:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13707,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 13703,
                      "name": "_storage",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13677,
                      "src": "3208:8:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7864",
                        "typeString": "contract Storage"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 13705,
                          "name": "__storage",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13696,
                          "src": "3227:9:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 13704,
                        "name": "Storage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7864,
                        "src": "3219:7:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Storage_$7864_$",
                          "typeString": "type(contract Storage)"
                        }
                      },
                      "id": 13706,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3219:18:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Storage_$7864",
                        "typeString": "contract Storage"
                      }
                    },
                    "src": "3208:29:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Storage_$7864",
                      "typeString": "contract Storage"
                    }
                  },
                  "id": 13708,
                  "nodeType": "ExpressionStatement",
                  "src": "3208:29:48"
                }
              ]
            },
            "documentation": "@notice Constructs an ERC721 RAYT contract. Sets the name to be\n         \"Robo Advisor for Yield\" and the ticker to \"RAY\".\n\n    /// @param   __storage - The Storage contracts address",
            "id": 13710,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "526f626f2041647669736f7220666f72205969656c64",
                    "id": 13699,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3152:24:48",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_b6ee325484c5a8aa53e3d36bb45825af89298554d3f712b125f547bee4a508fa",
                      "typeString": "literal_string \"Robo Advisor for Yield\""
                    },
                    "value": "Robo Advisor for Yield"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "524159",
                    "id": 13700,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "3178:5:48",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_6220ca3f77e0f4084fd86eb452630b5b212a90ba8ff64282483fe0d6aee3fe3d",
                      "typeString": "literal_string \"RAY\""
                    },
                    "value": "RAY"
                  }
                ],
                "id": 13701,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13698,
                  "name": "ERC721Metadata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 10429,
                  "src": "3137:14:48",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721Metadata_$10429_$",
                    "typeString": "type(contract ERC721Metadata)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3137:47:48"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13697,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13696,
                  "name": "__storage",
                  "nodeType": "VariableDeclaration",
                  "scope": 13710,
                  "src": "3114:17:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13695,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3114:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3113:19:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13702,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3199:0:48"
            },
            "scope": 13795,
            "src": "3102:143:48",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 13741,
              "nodeType": "Block",
              "src": "3821:157:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13722,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "++",
                    "prefix": false,
                    "src": "3832:6:48",
                    "subExpression": {
                      "argumentTypes": null,
                      "id": 13721,
                      "name": "salt",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13679,
                      "src": "3832:4:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 13723,
                  "nodeType": "ExpressionStatement",
                  "src": "3832:6:48"
                },
                {
                  "assignments": [
                    13725
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 13725,
                      "name": "entryHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 13742,
                      "src": "3848:17:48",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 13724,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "3848:7:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 13729,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 13727,
                        "name": "salt",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13679,
                        "src": "3887:4:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 13726,
                      "name": "createIssuanceHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13794,
                      "src": "3868:18:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bytes32_$",
                        "typeString": "function (uint256) view returns (bytes32)"
                      }
                    },
                    "id": 13728,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3868:24:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3848:44:48"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 13733,
                        "name": "beneficiary",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13714,
                        "src": "3915:11:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 13735,
                            "name": "entryHash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13725,
                            "src": "3933:9:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 13734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3928:4:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 13736,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3928:15:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13730,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16016,
                        "src": "3903:5:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$13795",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 13732,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 10066,
                      "src": "3903:11:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 13737,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3903:41:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 13738,
                  "nodeType": "ExpressionStatement",
                  "src": "3903:41:48"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13739,
                    "name": "entryHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 13725,
                    "src": "3962:9:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 13720,
                  "id": 13740,
                  "nodeType": "Return",
                  "src": "3955:16:48"
                }
              ]
            },
            "documentation": "@notice  Mint the unique RAYT and insert it into the token registry.\n\n    /// @dev     'key' is not currently used but I'm keeping it for now for\n           flexibility in the future\n\n    /// @param   beneficiary is the investor whose receiving the minted token\n\n    /// @return  the token id of the minted RAYT",
            "id": 13742,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": null,
                "id": 13717,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 13716,
                  "name": "onlyTokenWrapper",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 13694,
                  "src": "3777:16:48",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "3777:16:48"
              }
            ],
            "name": "mintRAYToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13715,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13712,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13742,
                  "src": "3707:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13711,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3707:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 13714,
                  "name": "beneficiary",
                  "nodeType": "VariableDeclaration",
                  "scope": 13742,
                  "src": "3730:19:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13713,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3730:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3699:56:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13720,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13719,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13742,
                  "src": "3808:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13718,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3808:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "3807:9:48"
            },
            "scope": 13795,
            "src": "3678:300:48",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13756,
              "nodeType": "Block",
              "src": "4604:52:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 13752,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13744,
                            "src": "4640:7:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 13751,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "4635:4:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 13753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4635:13:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13749,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16016,
                        "src": "4621:5:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$13795",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 13750,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "ownerOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9786,
                      "src": "4621:13:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                        "typeString": "function (uint256) view returns (address)"
                      }
                    },
                    "id": 13754,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4621:28:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 13748,
                  "id": 13755,
                  "nodeType": "Return",
                  "src": "4614:35:48"
                }
              ]
            },
            "documentation": "@notice  Gets the beneficiary/owner of the entered token.\n\n    /// @dev     Simple wrapper over the ERC721 standard function. Not required\n          since it doesn't override it. Uses naming that better fits\n          our use-case but besides that doesn't add anything.\n\n    /// @param   tokenId - The token's id we're trying to get the owner of\n\n    /// @return  The beneficiary/owner of the entered token.",
            "id": 13757,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "getBeneficiary",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13745,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13744,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13757,
                  "src": "4537:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13743,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4537:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4536:17:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13748,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13747,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13757,
                  "src": "4591:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 13746,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4591:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "4590:9:48"
            },
            "scope": 13795,
            "src": "4513:143:48",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13771,
              "nodeType": "Block",
              "src": "5410:50:48",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 13767,
                            "name": "tokenId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13759,
                            "src": "5444:7:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 13766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "5439:4:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint"
                        },
                        "id": 13768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5439:13:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 13764,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16016,
                        "src": "5425:5:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_RAYToken_$13795",
                          "typeString": "contract super RAYToken"
                        }
                      },
                      "id": 13765,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_exists",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9984,
                      "src": "5425:13:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                        "typeString": "function (uint256) view returns (bool)"
                      }
                    },
                    "id": 13769,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "5425:28:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 13763,
                  "id": 13770,
                  "nodeType": "Return",
                  "src": "5418:35:48"
                }
              ]
            },
            "documentation": "@notice  Checks if a RAYT with the specified ID exists\n\n    /// @dev     This is used to verify a token Id being entered for mutation\n          in other contracts RAYT exists, since it would be bad to\n          mutate storage of a RAYT yet to be minted (attack vector)\n\n    ///          This is also a somewhat meaningless wrapper around the ERC721\n          standard function. Can be removed and refactor all to directly\n          call _exists.\n\n    /// @param   tokenId - The id of the token we're checking's existence of\n\n    /// @return  true if token does exist or false if doesn't",
            "id": 13772,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "tokenExists",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13760,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13759,
                  "name": "tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 13772,
                  "src": "5335:15:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13758,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5335:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5334:17:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13763,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13762,
                  "name": "exists",
                  "nodeType": "VariableDeclaration",
                  "scope": 13772,
                  "src": "5393:11:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 13761,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "5393:4:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "5392:13:48"
            },
            "scope": 13795,
            "src": "5314:146:48",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 13793,
              "nodeType": "Block",
              "src": "6307:118:48",
              "statements": [
                {
                  "assignments": [
                    13780
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 13780,
                      "name": "issuanceHash",
                      "nodeType": "VariableDeclaration",
                      "scope": 13794,
                      "src": "6317:20:48",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 13779,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "6317:7:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 13790,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 13785,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 16015,
                                "src": "6375:4:48",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_RAYToken_$13795",
                                  "typeString": "contract RAYToken"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_RAYToken_$13795",
                                  "typeString": "contract RAYToken"
                                }
                              ],
                              "id": 13784,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "6367:7:48",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 13786,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "6367:13:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 13787,
                            "name": "_salt",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 13774,
                            "src": "6382:5:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 13782,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 15857,
                            "src": "6350:3:48",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 13783,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "6350:16:48",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 13788,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6350:38:48",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 13781,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15864,
                      "src": "6340:9:48",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                        "typeString": "function () pure returns (bytes32)"
                      }
                    },
                    "id": 13789,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6340:49:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6317:72:48"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 13791,
                    "name": "issuanceHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 13780,
                    "src": "6406:12:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 13778,
                  "id": 13792,
                  "nodeType": "Return",
                  "src": "6399:19:48"
                }
              ]
            },
            "documentation": "@notice  Helper function for computing the token id of a RAYT for issuance.\n\n    /// @dev     The hash/id is completely deterministic, but that shouldn't matter\n          since we have checks in place in other contracts to ensure\n          the integrity of a token id being entered (true owner/exists)\n\n    /// @param   _salt - The variable we use to ensure token id's are unique from\n                  each other.\n\n    /// TODO:     Stop passing in _salt as a parameter - waste of gas since its\n           already available in the global storage. Unless it's cheaper\n           to pass as an internal parameter over accessing global storage?",
            "id": 13794,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": true,
            "modifiers": [],
            "name": "createIssuanceHash",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 13775,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13774,
                  "name": "_salt",
                  "nodeType": "VariableDeclaration",
                  "scope": 13794,
                  "src": "6260:10:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 13773,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6260:4:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6259:12:48"
            },
            "payable": false,
            "returnParameters": {
              "id": 13778,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 13777,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 13794,
                  "src": "6294:7:48",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 13776,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6294:7:48",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "6293:9:48"
            },
            "scope": 13795,
            "src": "6232:193:48",
            "stateMutability": "view",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 13796,
        "src": "2080:4348:48"
      }
    ],
    "src": "1039:5390:48"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-10-25T03:55:57.518Z",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "return": "uint256 representing the amount owned by the passed address"
      },
      "burn(uint256)": {
        "details": "Burns a specific ERC721 token.",
        "params": {
          "tokenId": "uint256 id of the ERC721 token to be burned."
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "return": "address currently approved for the given token ID"
      },
      "getBeneficiary(bytes32)": {
        "details": "Simple wrapper over the ERC721 standard function. Not required          since it doesn't override it. Uses naming that better fits          our use-case but besides that doesn't add anything. ",
        "params": {
          "tokenId": "- The token's id we're trying to get the owner of "
        },
        "return": "The beneficiary/owner of the entered token."
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "return": "bool whether the given operator is approved by the given owner"
      },
      "mintRAYToken(bytes32,address)": {
        "details": "'key' is not currently used but I'm keeping it for now for           flexibility in the future ",
        "params": {
          "beneficiary": "is the investor whose receiving the minted token "
        },
        "return": "the token id of the minted RAYT"
      },
      "name()": {
        "details": "Gets the token name",
        "return": "string representing the token name"
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "return": "owner address currently marked as the owner of the given token ID"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted.     * Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "implement supportsInterface(bytes4) using a lookup table"
      },
      "symbol()": {
        "details": "Gets the token symbol",
        "return": "string representing the token symbol"
      },
      "tokenExists(bytes32)": {
        "details": "This is used to verify a token Id being entered for mutation          in other contracts RAYT exists, since it would be bad to          mutate storage of a RAYT yet to be minted (attack vector)     ///          This is also a somewhat meaningless wrapper around the ERC721          standard function. Can be removed and refactor all to directly          call _exists. ",
        "params": {
          "tokenId": "- The id of the token we're checking's existence of "
        },
        "return": "true if token does exist or false if doesn't"
      },
      "tokenURI(uint256)": {
        "details": "Returns an URI for a given token ID Throws if the token ID does not exist. May return an empty string.",
        "params": {
          "tokenId": "uint256 ID of the token to query"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "getBeneficiary(bytes32)": {
        "notice": "Gets the beneficiary/owner of the entered token. "
      },
      "mintRAYToken(bytes32,address)": {
        "notice": "Mint the unique RAYT and insert it into the token registry. "
      },
      "tokenExists(bytes32)": {
        "notice": "Checks if a RAYT with the specified ID exists "
      }
    }
  }
}