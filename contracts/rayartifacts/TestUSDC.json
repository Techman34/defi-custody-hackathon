{
  "contractName": "TestUSDC",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "issueTo",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issueTo\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decimals()\":{\"return\":\"the number of decimals of the token.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"name()\":{\"return\":\"the name of the token.\"},\"symbol()\":{\"return\":\"the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/tom/www/robo-advisor-yield/contracts/ray/test/TestUSDC.sol\":\"TestUSDC\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/ERC20.sol\":{\"keccak256\":\"0xeed2abfe39f717af8ac01674f865838e3f96ec890764a0d744fdecc1880c63c6\",\"urls\":[\"bzzr://4113dc7559fbb38d5733067497a4f499a37b90a13b8e3c55cd6fbe684f879a10\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/ERC20Detailed.sol\":{\"keccak256\":\"0x753d3f3de66331654c267965265b81d522e3f0a22f0fd43199fa46bd3288026b\",\"urls\":[\"bzzr://230e532ad216754574edd442b84237aad555e743ef05360433b27be35c30bc77\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/IERC20.sol\":{\"keccak256\":\"0xade35385596050c9e04c3d40bbf4f966647fc717ba45524b01baddce157ea36f\",\"urls\":[\"bzzr://3b06b9043944f7eddacd58d6d1dda69239b6c452c8ac2399ead92613efe0171f\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/math/SafeMath.sol\":{\"keccak256\":\"0x8c0e3dff911d510049bf7a52a471025c0ef3e07a62e130f7369a150e182153e1\",\"urls\":[\"bzzr://536487134d1f05f26652e13f179a6bed85cf053367b3756f25e0173ad8a04e84\"]},\"/Users/tom/www/robo-advisor-yield/contracts/ray/test/TestUSDC.sol\":{\"keccak256\":\"0x86d7fbd7b2c7718870727f3900ca61bdb4dae4a3c70901dc983978ea64b60d6d\",\"urls\":[\"bzzr://a06db7436f07dac9d12392685dd8143629065903f1f76a8b0a9f613bbe077a4b\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604080518082018252600881527f546573745553444300000000000000000000000000000000000000000000000060208083019182528351808501909452600584527f545553444300000000000000000000000000000000000000000000000000000090840152815191929160069161008d91600391906100be565b5081516100a19060049060208501906100be565b506005805460ff191660ff92909216919091179055506101599050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100ff57805160ff191683800117855561012c565b8280016001018555821561012c579182015b8281111561012c578251825591602001919060010190610111565b5061013892915061013c565b5090565b61015691905b808211156101385760008155600101610142565b90565b610973806101686000396000f3006080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806339509351146101fc57806370a082311461022057806395d89b4114610241578063a457c2d714610256578063a9059cbb1461027a578063b18e071b1461029e578063dd62ed3e146102b8575b600080fd5b3480156100ca57600080fd5b506100d36102df565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610375565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103f3565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103f9565b3480156101dd57600080fd5b506101e66104c2565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c600160a060020a03600435166024356104cb565b34801561022c57600080fd5b50610195600160a060020a036004351661057b565b34801561024d57600080fd5b506100d3610596565b34801561026257600080fd5b5061016c600160a060020a03600435166024356105f7565b34801561028657600080fd5b5061016c600160a060020a0360043516602435610642565b3480156102aa57600080fd5b506102b6600435610658565b005b3480156102c457600080fd5b50610195600160a060020a0360043581169060243516610665565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036b5780601f106103405761010080835404028352916020019161036b565b820191906000526020600020905b81548152906001019060200180831161034e57829003601f168201915b5050505050905090565b6000600160a060020a038316151561038c57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a038316600090815260016020908152604080832033845290915281205461042d908363ffffffff61069016565b600160a060020a038516600090815260016020908152604080832033845290915290205561045c84848461072f565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60055460ff1690565b6000600160a060020a03831615156104e257600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610516908363ffffffff6107fc16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036b5780601f106103405761010080835404028352916020019161036b565b6000600160a060020a038316151561060e57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610516908363ffffffff61069016565b600061064f33848461072f565b50600192915050565b610662338261089d565b50565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000808383111561072857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f23536166654d6174682073756228293a205468697320776f756c64207265737560448201527f6c7420696e20616e20756e646572666c6f770000000000000000000000000000606482015290519081900360840190fd5b5050900390565b600160a060020a038216151561074457600080fd5b600160a060020a03831660009081526020819052604090205461076d908263ffffffff61069016565b600160a060020a0380851660009081526020819052604080822093909355908416815220546107a2908263ffffffff6107fc16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561089657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f23536166654d6174682061646428293a205468697320776f756c64207265737560448201527f6c7420696e20616e206f766572666c6f77000000000000000000000000000000606482015290519081900360840190fd5b9392505050565b600160a060020a03821615156108b257600080fd5b6002546108c5908263ffffffff6107fc16565b600255600160a060020a0382166000908152602081905260409020546108f1908263ffffffff6107fc16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350505600a165627a7a72305820dfa7bf9b9386ffa1a4b44b1a5c868b736c9f5cd02303ee33cfccc2b9ddef0b320029",
  "deployedBytecode": "0x6080604052600436106100b95763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100be578063095ea7b31461014857806318160ddd1461018057806323b872dd146101a7578063313ce567146101d157806339509351146101fc57806370a082311461022057806395d89b4114610241578063a457c2d714610256578063a9059cbb1461027a578063b18e071b1461029e578063dd62ed3e146102b8575b600080fd5b3480156100ca57600080fd5b506100d36102df565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561010d5781810151838201526020016100f5565b50505050905090810190601f16801561013a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561015457600080fd5b5061016c600160a060020a0360043516602435610375565b604080519115158252519081900360200190f35b34801561018c57600080fd5b506101956103f3565b60408051918252519081900360200190f35b3480156101b357600080fd5b5061016c600160a060020a03600435811690602435166044356103f9565b3480156101dd57600080fd5b506101e66104c2565b6040805160ff9092168252519081900360200190f35b34801561020857600080fd5b5061016c600160a060020a03600435166024356104cb565b34801561022c57600080fd5b50610195600160a060020a036004351661057b565b34801561024d57600080fd5b506100d3610596565b34801561026257600080fd5b5061016c600160a060020a03600435166024356105f7565b34801561028657600080fd5b5061016c600160a060020a0360043516602435610642565b3480156102aa57600080fd5b506102b6600435610658565b005b3480156102c457600080fd5b50610195600160a060020a0360043581169060243516610665565b60038054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036b5780601f106103405761010080835404028352916020019161036b565b820191906000526020600020905b81548152906001019060200180831161034e57829003601f168201915b5050505050905090565b6000600160a060020a038316151561038c57600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a038316600090815260016020908152604080832033845290915281205461042d908363ffffffff61069016565b600160a060020a038516600090815260016020908152604080832033845290915290205561045c84848461072f565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b60055460ff1690565b6000600160a060020a03831615156104e257600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610516908363ffffffff6107fc16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b60048054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281526060939092909183018282801561036b5780601f106103405761010080835404028352916020019161036b565b6000600160a060020a038316151561060e57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610516908363ffffffff61069016565b600061064f33848461072f565b50600192915050565b610662338261089d565b50565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000808383111561072857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f23536166654d6174682073756228293a205468697320776f756c64207265737560448201527f6c7420696e20616e20756e646572666c6f770000000000000000000000000000606482015290519081900360840190fd5b5050900390565b600160a060020a038216151561074457600080fd5b600160a060020a03831660009081526020819052604090205461076d908263ffffffff61069016565b600160a060020a0380851660009081526020819052604080822093909355908416815220546107a2908263ffffffff6107fc16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561089657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603160248201527f23536166654d6174682061646428293a205468697320776f756c64207265737560448201527f6c7420696e20616e206f766572666c6f77000000000000000000000000000000606482015290519081900360840190fd5b9392505050565b600160a060020a03821615156108b257600080fd5b6002546108c5908263ffffffff6107fc16565b600255600160a060020a0382166000908152602081905260409020546108f1908263ffffffff6107fc16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350505600a165627a7a72305820dfa7bf9b9386ffa1a4b44b1a5c868b736c9f5cd02303ee33cfccc2b9ddef0b320029",
  "sourceMap": "147:210:68:-;;;194:67;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1609:149:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1683:12;;1609:149;;;245:1:68;;1683:12:28;;:5;;1609:149;1683:12;:::i;:::-;-1:-1:-1;1705:16:28;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;1731:9:28;:20;;-1:-1:-1;;1731:20:28;;;;;;;;;;;;-1:-1:-1;147:210:68;;-1:-1:-1;147:210:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;147:210:68;;;-1:-1:-1;147:210:68;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "147:210:68:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1818:74:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1818:74:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1818:74:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3933:238:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3933:238:27;-1:-1:-1;;;;;3933:238:27;;;;;;;;;;;;;;;;;;;;;;;;;2134:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2134:89:27;;;;;;;;;;;;;;;;;;;;4634:294;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4634:294:27;-1:-1:-1;;;;;4634:294:27;;;;;;;;;;;;2106:81:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2106:81:28;;;;;;;;;;;;;;;;;;;;;;;5431:317:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5431:317:27;-1:-1:-1;;;;;5431:317:27;;;;;;;2432:104;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2432:104:27;-1:-1:-1;;;;;2432:104:27;;;;;1954:78:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1954:78:28;;;;6256:327:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;6256:327:27;-1:-1:-1;;;;;6256:327:27;;;;;;;3160:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3160:137:27;-1:-1:-1;;;;;3160:137:27;;;;;;;266:88:68;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;266:88:68;;;;;;;2867:129:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;2867:129:27;-1:-1:-1;;;;;2867:129:27;;;;;;;;;;1818:74:28;1880:5;1873:12;;;;;;;;-1:-1:-1;;1873:12:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1855:6;;1873:12;;1880:5;;1873:12;;1880:5;1873:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1818:74;:::o;3933:238:27:-;3998:4;-1:-1:-1;;;;;4022:21:27;;;;4014:30;;;;;;4064:10;4055:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4055:29:27;;;;;;;;;;;;:37;;;4107:36;;;;;;;4055:29;;4064:10;4107:36;;;;;;;;;;;-1:-1:-1;4160:4:27;3933:238;;;;:::o;2134:89::-;2204:12;;2134:89;:::o;4634:294::-;-1:-1:-1;;;;;4758:14:27;;4713:4;4758:14;;;:8;:14;;;;;;;;4773:10;4758:26;;;;;;;;:37;;4789:5;4758:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;4729:14:27;;;;;;:8;:14;;;;;;;;4744:10;4729:26;;;;;;;:66;4805:26;4738:4;4821:2;4825:5;4805:9;:26::i;:::-;-1:-1:-1;;;;;4846:54:27;;4873:14;;;;:8;:14;;;;;;;;4861:10;4873:26;;;;;;;;;;;4846:54;;;;;;;4861:10;;4846:54;;;;;;;;;;;;-1:-1:-1;4917:4:27;4634:294;;;;;:::o;2106:81:28:-;2171:9;;;;2106:81;:::o;5431:317:27:-;5511:4;-1:-1:-1;;;;;5535:21:27;;;;5527:30;;;;;;5609:10;5600:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5600:29:27;;;;;;;;;;:45;;5634:10;5600:45;:33;:45;:::i;:::-;5577:10;5568:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5568:29:27;;;;;;;;;;;;:77;;;5660:60;;;;;;5568:29;;5660:60;;;;;;;;;;;-1:-1:-1;5737:4:27;5431:317;;;;:::o;2432:104::-;-1:-1:-1;;;;;2513:16:27;2487:7;2513:16;;;;;;;;;;;;2432:104::o;1954:78:28:-;2018:7;2011:14;;;;;;;;-1:-1:-1;;2011:14:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1993:6;;2011:14;;2018:7;;2011:14;;2018:7;2011:14;;;;;;;;;;;;;;;;;;;;;;;;6256:327:27;6341:4;-1:-1:-1;;;;;6365:21:27;;;;6357:30;;;;;;6439:10;6430:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;6430:29:27;;;;;;;;;;:50;;6464:15;6430:50;:33;:50;:::i;3160:137::-;3221:4;3237:32;3247:10;3259:2;3263:5;3237:9;:32::i;:::-;-1:-1:-1;3286:4:27;3160:137;;;;:::o;266:88:68:-;315:31;327:10;339:6;315:11;:31::i;:::-;266:88;:::o;2867:129:27:-;-1:-1:-1;;;;;2965:15:27;;;2939:7;2965:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;2867:129::o;1469:199:41:-;1527:7;;1554:6;;;;1546:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1637:5:41;;;1469:199::o;6797:256:27:-;-1:-1:-1;;;;;6884:16:27;;;;6876:25;;;;;;-1:-1:-1;;;;;6930:15:27;;:9;:15;;;;;;;;;;;:26;;6950:5;6930:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;6912:15:27;;;:9;:15;;;;;;;;;;;:44;;;;6982:13;;;;;;;:24;;7000:5;6982:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;6966:13:27;;;:9;:13;;;;;;;;;;;;:40;;;;7021:25;;;;;;;6966:13;;7021:25;;;;;;;;;;;;;6797:256;;;:::o;1749:198:41:-;1807:7;1838:5;;;1861:6;;;;1853:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1939:1;1749:198;-1:-1:-1;;;1749:198:41:o;7396:263:27:-;-1:-1:-1;;;;;7470:21:27;;;;7462:30;;;;;;7518:12;;:23;;7535:5;7518:23;:16;:23;:::i;:::-;7503:12;:38;-1:-1:-1;;;;;7572:18:27;;:9;:18;;;;;;;;;;;:29;;7595:5;7572:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;7551:18:27;;:9;:18;;;;;;;;;;;:50;;;;7616:36;;;;;;;7551:18;;:9;;7616:36;;;;;;;;;;7396:263;;:::o",
  "source": "pragma solidity 0.4.25;\n\nimport \"../protocol/impl/openzeppelin/ERC20/ERC20Detailed.sol\";\nimport \"../protocol/impl/openzeppelin/ERC20/ERC20.sol\";\n\n\ncontract TestUSDC is ERC20, ERC20Detailed {\n\n  constructor()\n  ERC20Detailed(\"TestUSDC\", \"TUSDC\", 6)\n  public\n  {}\n\n\n  function issueTo(uint256 amount) public {\n\n      super._mint(msg.sender, amount);\n\n    }\n\n}\n",
  "sourcePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/test/TestUSDC.sol",
  "ast": {
    "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/test/TestUSDC.sol",
    "exportedSymbols": {
      "TestUSDC": [
        15855
      ]
    },
    "id": 15856,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15825,
        "literals": [
          "solidity",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:68"
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/ERC20Detailed.sol",
        "file": "../protocol/impl/openzeppelin/ERC20/ERC20Detailed.sol",
        "id": 15826,
        "nodeType": "ImportDirective",
        "scope": 15856,
        "sourceUnit": 9624,
        "src": "25:63:68",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/ERC20.sol",
        "file": "../protocol/impl/openzeppelin/ERC20/ERC20.sol",
        "id": 15827,
        "nodeType": "ImportDirective",
        "scope": 15856,
        "sourceUnit": 9566,
        "src": "89:55:68",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15828,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9565,
              "src": "168:5:68",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$9565",
                "typeString": "contract ERC20"
              }
            },
            "id": 15829,
            "nodeType": "InheritanceSpecifier",
            "src": "168:5:68"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15830,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9623,
              "src": "175:13:68",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$9623",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 15831,
            "nodeType": "InheritanceSpecifier",
            "src": "175:13:68"
          }
        ],
        "contractDependencies": [
          9565,
          9623,
          9692
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 15855,
        "linearizedBaseContracts": [
          15855,
          9623,
          9565,
          9692
        ],
        "name": "TestUSDC",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 15839,
              "nodeType": "Block",
              "src": "259:2:68",
              "statements": []
            },
            "documentation": null,
            "id": 15840,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "5465737455534443",
                    "id": 15834,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "224:10:68",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_57929ecf232c02ddcaf4c761e28b93b3a83f732e8bcc9b89c7753e283fb13e1c",
                      "typeString": "literal_string \"TestUSDC\""
                    },
                    "value": "TestUSDC"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "5455534443",
                    "id": 15835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "236:7:68",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_71e23f2e7d4b62de5f28ee784b04b7e1cfaff423b2983ebcc46b750f66527dce",
                      "typeString": "literal_string \"TUSDC\""
                    },
                    "value": "TUSDC"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "36",
                    "id": 15836,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "245:1:68",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  }
                ],
                "id": 15837,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 15833,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9623,
                  "src": "210:13:68",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$9623_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "210:37:68"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15832,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "205:2:68"
            },
            "payable": false,
            "returnParameters": {
              "id": 15838,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "259:0:68"
            },
            "scope": 15855,
            "src": "194:67:68",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15853,
              "nodeType": "Block",
              "src": "306:48:68",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 15848,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15870,
                          "src": "327:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 15849,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "327:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 15850,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15842,
                        "src": "339:6:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15845,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16020,
                        "src": "315:5:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_TestUSDC_$15855",
                          "typeString": "contract super TestUSDC"
                        }
                      },
                      "id": 15847,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9480,
                      "src": "315:11:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 15851,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "315:31:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15852,
                  "nodeType": "ExpressionStatement",
                  "src": "315:31:68"
                }
              ]
            },
            "documentation": null,
            "id": 15854,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "issueTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15843,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15842,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 15854,
                  "src": "283:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15841,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "283:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "282:16:68"
            },
            "payable": false,
            "returnParameters": {
              "id": 15844,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "306:0:68"
            },
            "scope": 15855,
            "src": "266:88:68",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 15856,
        "src": "147:210:68"
      }
    ],
    "src": "0:358:68"
  },
  "legacyAST": {
    "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/test/TestUSDC.sol",
    "exportedSymbols": {
      "TestUSDC": [
        15855
      ]
    },
    "id": 15856,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 15825,
        "literals": [
          "solidity",
          "0.4",
          ".25"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:68"
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/ERC20Detailed.sol",
        "file": "../protocol/impl/openzeppelin/ERC20/ERC20Detailed.sol",
        "id": 15826,
        "nodeType": "ImportDirective",
        "scope": 15856,
        "sourceUnit": 9624,
        "src": "25:63:68",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/tom/www/robo-advisor-yield/contracts/ray/protocol/impl/openzeppelin/ERC20/ERC20.sol",
        "file": "../protocol/impl/openzeppelin/ERC20/ERC20.sol",
        "id": 15827,
        "nodeType": "ImportDirective",
        "scope": 15856,
        "sourceUnit": 9566,
        "src": "89:55:68",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15828,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9565,
              "src": "168:5:68",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$9565",
                "typeString": "contract ERC20"
              }
            },
            "id": 15829,
            "nodeType": "InheritanceSpecifier",
            "src": "168:5:68"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 15830,
              "name": "ERC20Detailed",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 9623,
              "src": "175:13:68",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20Detailed_$9623",
                "typeString": "contract ERC20Detailed"
              }
            },
            "id": 15831,
            "nodeType": "InheritanceSpecifier",
            "src": "175:13:68"
          }
        ],
        "contractDependencies": [
          9565,
          9623,
          9692
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 15855,
        "linearizedBaseContracts": [
          15855,
          9623,
          9565,
          9692
        ],
        "name": "TestUSDC",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 15839,
              "nodeType": "Block",
              "src": "259:2:68",
              "statements": []
            },
            "documentation": null,
            "id": 15840,
            "implemented": true,
            "isConstructor": true,
            "isDeclaredConst": false,
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "hexValue": "5465737455534443",
                    "id": 15834,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "224:10:68",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_57929ecf232c02ddcaf4c761e28b93b3a83f732e8bcc9b89c7753e283fb13e1c",
                      "typeString": "literal_string \"TestUSDC\""
                    },
                    "value": "TestUSDC"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "5455534443",
                    "id": 15835,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "236:7:68",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_71e23f2e7d4b62de5f28ee784b04b7e1cfaff423b2983ebcc46b750f66527dce",
                      "typeString": "literal_string \"TUSDC\""
                    },
                    "value": "TUSDC"
                  },
                  {
                    "argumentTypes": null,
                    "hexValue": "36",
                    "id": 15836,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "245:1:68",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  }
                ],
                "id": 15837,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 15833,
                  "name": "ERC20Detailed",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9623,
                  "src": "210:13:68",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC20Detailed_$9623_$",
                    "typeString": "type(contract ERC20Detailed)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "210:37:68"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15832,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "205:2:68"
            },
            "payable": false,
            "returnParameters": {
              "id": 15838,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "259:0:68"
            },
            "scope": 15855,
            "src": "194:67:68",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 15853,
              "nodeType": "Block",
              "src": "306:48:68",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 15848,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15870,
                          "src": "327:3:68",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 15849,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "327:10:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 15850,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 15842,
                        "src": "339:6:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 15845,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16020,
                        "src": "315:5:68",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_TestUSDC_$15855",
                          "typeString": "contract super TestUSDC"
                        }
                      },
                      "id": 15847,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_mint",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 9480,
                      "src": "315:11:68",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 15851,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "315:31:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 15852,
                  "nodeType": "ExpressionStatement",
                  "src": "315:31:68"
                }
              ]
            },
            "documentation": null,
            "id": 15854,
            "implemented": true,
            "isConstructor": false,
            "isDeclaredConst": false,
            "modifiers": [],
            "name": "issueTo",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 15843,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 15842,
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 15854,
                  "src": "283:14:68",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 15841,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "283:7:68",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "282:16:68"
            },
            "payable": false,
            "returnParameters": {
              "id": 15844,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "306:0:68"
            },
            "scope": 15855,
            "src": "266:88:68",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 15856,
        "src": "147:210:68"
      }
    ],
    "src": "0:358:68"
  },
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-10-25T03:55:57.697Z",
  "devdoc": {
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "decimals()": {
        "return": "the number of decimals of the token."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "name()": {
        "return": "the name of the token."
      },
      "symbol()": {
        "return": "the symbol of the token."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}